アルゴリズムの違い
==================

  1. 幅優先探索(メモリを大量に使用)
  2. 反復深化(C++仕様, STL利用)
  3. 反復深化(C仕様, STL非利用)
  4. 3+タイムアウト再検索
  5. 正解から問題への道を探す、逆探査
  6. 深さ優先探索(-d/--depth)

各試行の内容
============

005
---
幅優先からはじめ、上辺もしくは左辺が確定した場合に
問題サイズを小さくして再帰的に探索を行うアルゴリズム。
全盤面に無理矢理かけた結果、28時間近くかかったが40%の結果を出した。

006
---
反復深化を用いて4x4(rank 16)以下の盤面を解かせた結果。
時々かなり厄介な盤面があるようだ。

007
---
005で漏れた問題を反復深化+10秒のタイムアウトで計算。4.63時間。
これを005とマージして一次提出する。

008
---
005で解けた問題を反復深化+10秒のタイムアウトで再計算。4.77時間。
やや正答数は減ったが、解の短さは段違い。

009
---
反復深化+120秒のタイムアウトで全問題へチャレンジ。
約35時間15分で 4229/5000 (84.58%) の結果。
008,007,005をマージしてanswers-009-merged.txtとして提出する。

010-2, 010-3
-----------
反復深化で4x4(rank16)以下を処理。
Ver2とVer3(2a程度だが...)のアルゴリズムの成績の違いを比較するためのもの。
ベースは006と比較できるが、そもそも速度が速くなってるので参考にはならない。

011
---
010までの残問を反復深化+タイムアウト5分で再計算。53.6時間。

012
---
010までの残問を反復深化(改変)+タイムアウト60秒で再計算。6.11時間。
改変内容は1depthあたり5秒以上を消費した場合に、
現時点で最初に出てきた一番良い答えから再度探索し直す、というもの。
単純な割に強力かつ高速で解答率が高いが、
明らかにローカルミニマムに落ちている時にどう脱出するかが今後の課題。

013
---
012で取りこぼした問題のうち壁を含まないものを、
1depthあたり1秒のタイムアウトで再計算。8/13を正答 ...残り137

014
---
013の取りこぼしを
「1depthで進行が無い場合にタイムアウトを延伸」
するアルゴリズムで再計算。3/5を正答 ...残り134

015
---
014と同じアルゴリズムで、012の取りこぼしを再計算。全体のタイムアウトは90秒。
途中#2722の計算に成功するものの、失敗と報告するバグを発見。手動で訂正。
同様に#3312で計算ミス(NOTFOUND)。手動で修正。
同様に#3549で計算ミス(TIMEOUT)。手動で修正。
同様に#4682で計算ミス(NOTFOUND)。手動で修正。

016
---
015とほぼ同じだが、1depthタイムアウト時の候補選択に「より短いもの」という制約を
つけ、全体タイムアウトを5分としたもの。 ...残り55
以下の間違いが発生: 562, 2308, 3721, 3952, 4238, 4347, 4895
次のものは手動で修正可能: 2308, 4238, 4895
解けていないことを確認したもの: 562, 3721, 3952, 4347

逆解きで解けたもの: 4347

誤答の原因は初期距離の計算を誤っていたから。結果、実際にはしていないにも関わら
ず到達したと勘違いしていた。

修正後に解けた: 3721

017
---
016までで残った問題に逆解きをタイムアウト5分で実行。
